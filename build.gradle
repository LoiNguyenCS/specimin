
plugins {
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.diffplug.spotless' version '6.18.0'
    id 'org.checkerframework' version '0.6.27'
    id("net.ltgt.errorprone") version "2.0.2"
    id 'com.adarshr.test-logger' version '3.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

application {
    mainClass = 'org.checkerframework.specimin.SpeciminRunner'
}

dependencies {

    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.23.1'

    implementation 'net.sf.jopt-simple:jopt-simple:5.0.4'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    errorprone("com.google.errorprone:error_prone_core:2.10.0")
}

// Use require-javadoc. From https://github.com/plume-lib/require-javadoc.
configurations {
    requireJavadoc
}
dependencies {
    requireJavadoc "org.plumelib:require-javadoc:1.0.2"
}
task requireJavadoc(type: JavaExec) {
    group = 'Documentation'
    description = 'Ensures that Javadoc documentation exists.'
    mainClass = "org.plumelib.javadoc.RequireJavadoc"
    classpath = configurations.requireJavadoc
    args "src/main/java"
}

checkerFramework {
    checkers = [
            'org.checkerframework.checker.nullness.NullnessChecker',
            'org.checkerframework.checker.resourceleak.ResourceLeakChecker',
            'org.checkerframework.checker.interning.InterningChecker',
            'org.checkerframework.checker.signature.SignatureChecker'
    ]
    excludeTests = true

    extraJavacArgs = [
            "-Astubs=${projectDir}/JavaParser.astub"
    ]
}

spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        googleJavaFormat().reflowLongStrings()
        formatAnnotations()
    }
}

compileJava.dependsOn 'spotlessApply'
check.dependsOn requireJavadoc

// This groupId is just for temporal use
group = 'njit.edu'
version = '1.0'



java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'Specimin'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Specimin'
                description = 'A specification minimizer for Java language'
                url = ''
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        // I am not sure which id and email you would like to use
                        id = ''
                        name = 'Martin Kellogg'
                        email = ''
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:kelloggm/specimin.git'
                    developerConnection = 'scm:git:git@github.com:kelloggm/specimin.git'
                    url = ''
                }
            }
        }
    }
    repositories {
        maven {
            // I think ultimately these urls should be the Maven repos, though I have no ideas how to create those repos
            def releasesRepoUrl = layout.buildDirectory.dir('.')
            def snapshotsRepoUrl = layout.buildDirectory.dir('.')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
